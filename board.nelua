require 'config'
require 'raylib'
require 'piece'

global Board = @record{
  cells: [VERT_CELLS][HORZ_CELLS]Color
}

function Board:piece_collides(piece: *Piece)
  for iy=0,piece.size-1 do
    for ix=0,piece.size-1 do
      local tx, ty = piece.x+ix, piece.y+iy
      if piece.layout[iy][ix] ~= 0 then
        if tx < 0 or tx >= HORZ_CELLS or ty < 0 or ty >= VERT_CELLS then
          return true
        end
        if self.cells[ty][tx].a ~= 0 then
          return true
        end
      end
    end
  end
  return false
end

function Board:place_piece(piece: *Piece)
  for iy=0,piece.size-1 do
    for ix=0,piece.size-1 do
      local tx, ty = piece.x+ix, piece.y+iy
      if piece.layout[iy][ix] ~= 0 then
        self.cells[ty][tx] = piece.color
      end
    end
  end
end

function Board:clear_lines()
  local num_clears = 0
  for y=0,VERT_CELLS-1 do
    -- the if line y is full
    local full = true
    for x=0,HORZ_CELLS-1 do
      if self.cells[y][x].a == 0 then
        full = false
        break
      end
    end

    -- slide lines down
    if full then
      num_clears = num_clears + 1
      for ny=y,1,-1 do
        for x=0,HORZ_CELLS-1 do
          self.cells[ny][x] = self.cells[ny-1][x]
        end
      end
    end
  end
  return num_clears
end

local function draw_grid()
  local GRID_COLOR: Color <const> = {r=0x11,g=0x11,b=0x11,a=0xff}
  local GAP_COLOR: Color <const> = DARKGRAY
  local GAP_COLOR2: Color <const> = Raylib.Fade(DARKGRAY, 0.2)

  Raylib.DrawRectangle(GRID_OFFSET_X, GRID_OFFSET_Y,
                       GRID_WIDTH, GRID_HEIGHT,
                       GRID_COLOR)
  for iy=0,VERT_CELLS do
    local x = GRID_OFFSET_X - 1
    local w = GRID_WIDTH + 2
    local y = GRID_OFFSET_Y + iy*CELL_SIZE
    if iy == VERT_CELLS then y = y - 1 end
    Raylib.DrawRectangle(x, y-1, w, 3, GAP_COLOR2)
    Raylib.DrawRectangle(x, y, w, 1, GAP_COLOR)
  end
  for ix=0,HORZ_CELLS do
    local x = GRID_OFFSET_X + ix*CELL_SIZE
    local y = GRID_OFFSET_Y - 1
    local h = GRID_HEIGHT + 2
    if ix == HORZ_CELLS then x = x - 1 end
    Raylib.DrawRectangle(x-1, y, 3, h, GAP_COLOR2)
    Raylib.DrawRectangle(x, y, 1, h, GAP_COLOR)
  end
  Raylib.DrawRectangleLines(GRID_OFFSET_X-1, GRID_OFFSET_Y-1,
                            GRID_WIDTH+2, GRID_HEIGHT+2,
                            GRID_COLOR)
end

function Board:draw()
  draw_grid()
  for iy=0,VERT_CELLS-1 do
    for ix=0,HORZ_CELLS-1 do
      local x = GRID_OFFSET_X + ix*CELL_SIZE
      local y = GRID_OFFSET_Y + iy*CELL_SIZE
      Piece.draw_cell(x, y, self.cells[iy][ix], false)
    end
  end
end

function Board:draw_piece(piece: *Piece, shallow: boolean)
  local x = GRID_OFFSET_X + piece.x*CELL_SIZE
  local y = GRID_OFFSET_Y + piece.y*CELL_SIZE
  piece:draw(x, y, shallow)
end
