require 'config'
require 'raylib'
require 'math'

global Piece = @record{
  x: integer,
  y: integer,
  width: integer,
  height: integer,
  size: integer,
  layout: [4][4]byte,
  color: Color
}

global PIECES: [7]Piece = {
  { size=4, layout={
      {0,0,0,0},
      {1,1,1,1},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=4, height=3,
    color=SKYBLUE
  },
  { size=3, layout={
      {0,1,0,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=PINK
  },
  { size=3, layout={
      {0,1,1,0},
      {1,1,0,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=GREEN
  },
  { size=3, layout={
      {1,1,0,0},
      {0,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RED
  },
  { size=3, layout={
      {1,0,0,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=BLUE
  },
  { size=3, layout={
      {0,0,1,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=ORANGE
  },
  { size=2, layout={
      {1,1,0,0},
      {1,1,0,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=2, height=2,
    color=YELLOW
  }
}

function Piece.random_piece()
  local index = math.random(0, #PIECES-1)
  local piece = PIECES[index]
  piece.x = (HORZ_CELLS - piece.size) // 2
  piece.y = 0
  return piece
end

function Piece:rotate_left()
  local layout = self.layout
  for i=0,self.size-1 do
    for j=0,self.size-1 do
      self.layout[i][j] = layout[j][self.size-1-i]
    end
  end
end

function Piece:rotate_right()
  local layout = self.layout
  for i=0,self.size-1 do
    for j=0,self.size-1 do
      self.layout[j][self.size-1-i] = layout[i][j]
    end
  end
end

function Piece:translate(x: integer, y: integer)
  self.x = self.x + x
  self.y = self.y + y
end

function Piece.draw_cell(x: integer, y: integer, color: Color, shallow: boolean)
  if color.a == 0 then return end
  local rect: Rectangle = {
    x = x + CELL_MARGIN,
    y = y + CELL_MARGIN,
    width = CELL_SIZE - CELL_MARGIN,
    height = CELL_SIZE - CELL_MARGIN
  }
  local fill_color = Fade(color, 0.75)
  if not shallow then
    DrawRectangleRec(rect, fill_color)
  end
  DrawRectangleLinesEx(rect, 2, color)
end

function Piece:draw(x: integer, y: integer, shallow: boolean)
  for iy=0,self.size-1 do
    for ix=0,self.size-1 do
      if self.layout[iy][ix] ~= 0 then
        local x = x + ix*CELL_SIZE
        local y = y + iy*CELL_SIZE
        Piece.draw_cell(x, y, self.color, shallow)
      end
    end
  end
end
