require 'config'
require 'riv'
require 'math'

local Piece = @record{
  x: integer,
  y: integer,
  width: integer,
  height: integer,
  size: integer,
  layout: [4][4]byte,
  color: uint8
}

local PIECES: [7]Piece = {
  { size=4, layout={
      {0,0,0,0},
      {1,1,1,1},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=4, height=3,
    color=RIV_COLOR_LIGHTBLUE
  },
  { size=3, layout={
      {0,1,0,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RIV_COLOR_PINK
  },
  { size=3, layout={
      {0,1,1,0},
      {1,1,0,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RIV_COLOR_GREEN
  },
  { size=3, layout={
      {1,1,0,0},
      {0,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RIV_COLOR_RED
  },
  { size=3, layout={
      {1,0,0,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RIV_COLOR_LIGHTTEAL
  },
  { size=3, layout={
      {0,0,1,0},
      {1,1,1,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=3, height=2,
    color=RIV_COLOR_ORANGE
  },
  { size=2, layout={
      {1,1,0,0},
      {1,1,0,0},
      {0,0,0,0},
      {0,0,0,0},
    },
    width=2, height=2,
    color=RIV_COLOR_YELLOW
  }
}

function Piece.random_piece()
  local index = riv_rand_uint(#PIECES-1)
  local piece = PIECES[index]
  piece.x = (HORZ_CELLS - piece.size) // 2
  piece.y = 0
  return piece
end

function Piece:rotate_left()
  local layout = self.layout
  for i=0,self.size-1 do
    for j=0,self.size-1 do
      self.layout[i][j] = layout[j][self.size-1-i]
    end
  end
end

function Piece:rotate_right()
  local layout = self.layout
  for i=0,self.size-1 do
    for j=0,self.size-1 do
      self.layout[j][self.size-1-i] = layout[i][j]
    end
  end
end

function Piece:translate(x: integer, y: integer)
  self.x = self.x + x
  self.y = self.y + y
end

function Piece.draw_cell(x: integer, y: integer, color: Color, shallow: boolean)
  if color == 0 then return end
  local x = x + CELL_MARGIN
  local y = y + CELL_MARGIN
  local width = CELL_SIZE - CELL_MARGIN
  local height = CELL_SIZE - CELL_MARGIN
  if not shallow then
    riv_draw_rect_fill(x, y, width, height, color)
  else
    riv_draw_rect_fill(x, y, width, height, RIV_COLOR_SLATE)
    riv_draw_rect_line(x, y, width, height, color)
  end
end

function Piece:draw(x: integer, y: integer, shallow: boolean)
  for iy=0,self.size-1 do
    for ix=0,self.size-1 do
      if self.layout[iy][ix] ~= 0 then
        local x = x + ix*CELL_SIZE
        local y = y + iy*CELL_SIZE
        Piece.draw_cell(x, y, self.color, shallow)
      end
    end
  end
end

return Piece
